{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","log","movieTrailer","name","original_name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","opt","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.27fe11be.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance;","// rfce\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: 360,\r\n    width: \"100%\",\r\n    playerVars: {\r\n      //https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    console.log(movie);\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(\r\n        movie?.name ||\r\n          movie?.original_name ||\r\n          movie?.original_title ||\r\n          movie?.title ||\r\n          \"\"\r\n      )\r\n        .then((url) => {\r\n          // console.log(url);\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          console.log(urlParams);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  //   console.log(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row-posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            key={movie.id}\r\n            src={`${url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opt={opts}></YouTube>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"76bfce2e1ca11a14f663023ba2208348\";\r\n\r\nconst request = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">MyList</button>\r\n        </div>\r\n\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => window.removeEventListener(\"scroll\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"netflix logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n        alt=\"netflix avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFELIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TopRated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"ActionMovies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"ComedyMovies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"HorrorMovies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"RomanceMovies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}